import random
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from config import bot, dp, regions, ADMINS
from keyboard.client_cb import regions_markup
from database.bot_db import sql_command_select_type, sql_command_exists


async def start_command(message: types.Message):
    lst: list = await sql_command_exists(message.from_user.id)
    if len(lst) > 0:
        await bot.send_message(message.chat.id, '–ó–ª–æ–π –±–æ—Ç –Ω–∞ —Å–≤—è–∑–∏!', reply_markup=
                               ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
                                   KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù'), KeyboardButton('–ú–µ–Ω—é üìã')
                               ))
    else:
        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å–≤—Ç—É—é –≤ –ó–ª–æ–π –±–æ—Ç!', reply_markup=
                               ReplyKeyboardMarkup(
                                   resize_keyboard=True,
                                   one_time_keyboard=True,
                               ).add(
                                   KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù'), KeyboardButton('–ú–µ–Ω—é üìã')
                               ))


async def show_dish_types(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø', reply_markup=regions_markup)


async def show_dish_on_type(message: types.Message):
    result = await sql_command_select_type(message.text)
    if len(result) == 0:
        await message.answer('–ü–æ–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç –¢–æ–≤–∞—Ä–æ–≤.')
    else:
        for product in result:
            await bot.send_photo(message.from_user.id, photo=product[1],
                                 caption=f'–ò–º—è: {product[2]}\n–ù–æ–º–µ—Ä: {product[3]}\n'
                                         f'–†–µ–≥–∏–æ–Ω: {product[4]}\n–ü—Ä–∞–π—Å: {product[5]}\n'
                                         f'–û–ø–∏—Å–∞–Ω–∏–µ: {product[6]}')


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(show_dish_types, commands=['menu'])
    dp.register_message_handler(show_dish_types, Text(equals=['–ú–µ–Ω—é üìã']))
    dp.register_message_handler(show_dish_on_type, Text(endswith=regions))
